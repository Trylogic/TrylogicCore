package tl.starling.viewController{	import starling.display.DisplayObjectContainer;	public class StarlingSingleViewController extends StarlingViewController	{		[Outlet]		public var container : DisplayObjectContainer;		private var _currentViewController : StarlingViewController;		public function get currentViewController() : StarlingViewController		{			return _currentViewController;		}		public function set currentViewController( value : StarlingViewController ) : void		{			if ( value != _currentViewController )			{				if ( _currentViewController )				{					_currentViewController.removeViewFromContainer( container );					_currentViewController.parentViewController = null;				}				_currentViewController = value;				_currentViewController.parentViewController = this;			}			fillContainer();		}		public function StarlingSingleViewController()		{		}		override internal function internalViewLoaded() : void		{			fillContainer();		}		private function fillContainer() : void		{			if ( !viewIsLoaded )			{				return;			}			while ( container.numChildren )			{				container.removeChildAt( 0 );			}			if ( _currentViewController == null )			{				return;			}			_currentViewController.addViewToContainer( container );		}	}}